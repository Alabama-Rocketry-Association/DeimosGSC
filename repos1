import math
import numpy as np
import scipy
from scipy import integrate
from matplotlib import pyplot as plt
#constants in the six-degree polynomial. global so its easier to change
c0 = 712.75
c1 = 1900.2
c2 = -1346.9
c3 = 384.66
c4 = -52.941
c5 = 3.4619
c6 = -0.0863
burnTime = 12.4      #burn time of the motor (s)
startTime = 0
endTime = burnTime + 10    #how long the for loop is gonna run for (s)
mass = 15.258     #mass of the rocket (kgs)
g = -9.81   #acc due to gravity
bodyCross = 0.0182322   #m^2 (cross sectional area of the body)
latCross = 0.595    #m^2   (lateral cross sectional area)
windSpeed = 0   #windspeed taken from weather request

timeBitch = np.array([0, 0.15, 0.21, 0.25, 0.43, 0.5, 0.62, 0.8, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12.7, 12.76])
thrustBitch = np.array([0, 612.31, 1532.76, 1722, 1717.66, 1542.85, 1430.02, 1389.71, 1374.27, 1338.9, 1305.38, 1271.81, 1204, 1078, 928, 743, 563, 424.9, 299.7, 196.16, 116.76, 65.43, 0])
    
    #declare np arrays to hold values from calculations
vel = list()
height = list()
acc = list()
timePts = list()
    #insert starting values into arrays
vel.append(0)
height.append( 12)
acc.append(-9.81)
timePts.append(0)

#Altitude calculations
T_0 = 288.16    #K
a = 0.0065      #K/m
P_0 = 101325    #Pa
p_0 = 1.225     #Kg/m^3
n = 5.2561

def temp(h):        #air temperature profile by altitude
    return T_0 - a*h
def atm(h):         #air pressure profile by altitude
    return ((temp(h) / T_0)**n) * P_0
def density(h):     #air density profile by altitude
    return ((temp(h) / T_0)**(n-1)) * p_0
def latArea(theta = 0):
    return latCross * math.cos(theta)
def drag(rho, vel, C_d, area):
    return ((1/2)(rho)(vel**2)(area))
def thrust(t, y):   #calculate thrust offered by motor at any time after ignition
    if (t < burnTime):
        return (c6*t**6 + c5*t**5 + c4*t**4 + c3*t**3 + c2*t**2 + c1*t + c0)
    else:
        return 0.00

def RK4(f, x, y, dx):   #4th-order Runge-Kutta integration
    k1 = f(x, y)
    k2 = f(x + 0.5*dx, y + 0.5*k1*dx)
    k3 = f(x + 0.5*dx, y + 0.5*k2*dx)
    k4 = f(x + dx, y + k3*dx)
    y = y + ((k1 + 2*k2 + 2*k3 + k4)*dx/6)
    return y
    
def extFORCE(t, h, dx, g, thrustCurve, gamma = 0):
    force = 0
    #########   
    force += latArea * density(h) * windSpeed      #windforce
    #########
    return force

t = 0
z = 0.01
dt = 0.1
i = 1 #iterator
totImpulse = 0
while (t < endTime):
    totImpulse += RK4(thrust, t, z, dt)
    #print(thrust(t, 0))
    print(totImpulse)
    t += dt

#plotting bish

fig, ax1 = plt.subplots()
colorVel = 'tab:red'
ax1.set_xlabel('time (s)')
ax1.set_ylabel('velocity', color=colorVel)
ax1.plot(timePts, acc, color=colorVel)
ax1.tick_params(axis='y', labelcolor=colorVel)


#print(scipy.integrate.simps(thrustBitch, timeBitch, 1, -1, 'avg'))
#print(str(t) + ", " + str(totalImpulse))
